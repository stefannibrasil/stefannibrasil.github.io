[{"content":"You\u0026rsquo;re focusing on finding that first Ruby job. You\u0026rsquo;ve been practicing for months or years. You\u0026rsquo;ve been applying to entry-level jobs, even internships.\nYou polish your resume. Tweak your portfolio. Attach your CV. Press Submit.\nChirp, chirp, chirp ü¶ó\nNothing happens.\nWorse: you do an amazing interview, people loved you. But then they say they are moving forward with someone else that has more experience.\nWelp, next time is going to be different. Keep hoping for the best.\nYou ask yourself: \u0026ldquo;Should I just keep practicing and building my portfolio?\u0026rdquo; ü§î\nThat may sound like a good idea. After all, no one will say no to you when you show your perfect portfolio that you\u0026rsquo;ve been crafting for the past months, right?\nWrong.\nWhen you get a no and people say you don\u0026rsquo;t have experience, they are mostly asking themselves this question:\n Are you recommended by someone I know?\n It\u0026rsquo;s just how humans work. We are wired to confirm our biases. We don\u0026rsquo;t like uncertainty and unfamiliarity.\nIf you look closely, there are people out there getting jobs without experience. Some of them are far less skilled than you. Lack of experience is not the only problem.\nBut what else can you do to get experience and recommendations for your first Ruby dev job?\nDid you ever think about getting experience by doing volunteer work? I know, working for free doesn\u0026rsquo;t sound good.\nBut your current strategy sucks. You\u0026rsquo;re still reading this post because you are not sure what else you can do. Deep inside, you know just practicing isn\u0026rsquo;t the answer.\nBy the time you get to the end of this post, you\u0026rsquo;ll know how to get out of the Dev With No Experience Roller Coaster‚Ñ¢ by strategically doing volunteer work.\nGet real-world experience with volunteer work  \u0026ldquo;Volunteer work is one of the best ways there is to get your feet wet and gain experience in a new field. You don‚Äôt need credentials or prior experience. You don‚Äôt have to pay them a cent for your training. [\u0026hellip;] Volunteer work is the great cure for the classic vicious cycle, \u0026lsquo;Can‚Äôt get experience without a job; can‚Äôt get a job without experience.' If you think unpaid experience doesn‚Äôt count on a resume, think again. Experience is experience.\u0026rdquo; \u0026mdash; Wishcraft, by Barbara Sher. Unfortunately, not everyone has the privilege of working without getting paid. Therefore, this strategy doesn\u0026rsquo;t work for everyone.\nBut if you\u0026rsquo;ve been investing your time and resources into practicing your coding skills by doing one workshop/course/tutorial after another, then you do have the time and resources to get real-world experience by doing volunteer work.\nIt\u0026rsquo;s not that investing in Education is bad! Improving your skills is necessary and will get you further. Study and also volunteer.\nI\u0026rsquo;ve heard countless examples of people that were offered great opportunities after they have done volunteer work. One of my first job opportunities came from volunteering to be a coach at a Rails Girls workshop. I also volunteered for non-profit projects.\nWhen you\u0026rsquo;re a helpful, reliable, and motivated person, people will trust and advocate for you. You might not even need to apply for jobs. People will want to work with you because you have experience helping others.\nEverything you don\u0026rsquo;t get by building yet another project and practicing your coding skills in the controlled environment you\u0026rsquo;re trapping yourself in.\nHow to get started with volunteering Don\u0026rsquo;t know any organizations/projects that you can reach out to get started? I didn\u0026rsquo;t as well! I asked some friends around and I got this list for you:\n  Contribute to an open-source project. I\u0026rsquo;ve heard good things about CASA;\n  Build an app for a project in your local community;\n  Volunteer at non-profits. These are great ones to help you get started:\n Ruby for Good - A non-profit organizations to build an inclusive technology community, and provide technology-focused educational opportunities to underserved communities; MPKAT - A not-for-profit diversity community initiative. They provide a network for growth and healing through resources, discussion, supportive relationships, and opportunities; Tech for Good - In general, lots of communities called \u0026ldquo;tech for good\u0026rdquo; are a good place to start. Code for America - Each city has brigades of people with a range of skills, and they organize those people to work on software/tools to benefit civic/nonprofit orgs in that city; Code for Philly - Code for Philly is a very successful brigade from a larger organization called The Brigade Network.    Ask around and you will find out people who successfully followed this strategy. Study their trajectory and follow their steps. I\u0026rsquo;m happy to chat, if you want!\n  Note: if you notice that you are taking a long time choosing one from the list, set a 15min timer to make a decision. It\u0026rsquo;s not important that you find the perfect one for you. Just get started. See how it goes. If it doesn\u0026rsquo;t work out, try another one. You\u0026rsquo;ll get confidence by taking action, not by overthinking. Deal? üôã‚Äç‚ôÄÔ∏è\nAnother note: Keep in mind that it\u0026rsquo;s possible that people have expectations that you know how solve most of the problems on your own. Everyone is probably solving their own problems and that requires too much already. That doesn\u0026rsquo;t mean you should know how to solve them, though. You\u0026rsquo;re learning and having support is part of the process. Make sure to find a group that can help you along the way. It\u0026rsquo;s okay to ask for help \u0026lt;3\n Let\u0026rsquo;s be clear: no strategy can guarantee you a job. There is no guarantee for anything. But if you want to get different results and maximize your opportunities, then volunteering is a great way to build your new career.\nMeet people that will advocate for you. Meet people that you can help with the skills you have to create valuable work. Show the world what you got.\nTo quote Barbara Sher (again):\n Volunteering is one of the best ways to get out there now.\n Get out there. Help someone by volunteering your time and skills and start making things happen for you.\nYou got this üí™.\nPS. Thanks Sarah Eggleston, Alex Hillman and Ben Novack for suggesting some of the organizations included in this post. If you\u0026rsquo;d like to suggest one, please reach out to me ^.^\n Did you like this article? Then you're gonna love these other ones:\n  The Unstuck Guide for Self-Taught Developers   Get unstuck on your coding exercise with Just One Exercise   Worried you don\u0026rsquo;t contribute to your team as an early career software engineer?   ","permalink":"https://www.stefannibrasil.me/posts/first-ruby-dev-job-no-experience/","summary":"You\u0026rsquo;re focusing on finding that first Ruby job. You\u0026rsquo;ve been practicing for months or years. You\u0026rsquo;ve been applying to entry-level jobs, even internships.\nYou polish your resume. Tweak your portfolio. Attach your CV. Press Submit.\nChirp, chirp, chirp ü¶ó\nNothing happens.\nWorse: you do an amazing interview, people loved you. But then they say they are moving forward with someone else that has more experience.\nWelp, next time is going to be different.","title":"Dev With No Experience? Here's one way to get experience today."},{"content":"When you get stuck, it‚Äôs really easy to block yourself from creatively solving your problem.\nYou start asking \u0026ldquo;why am I so dumb?\u0026rdquo;, or thinking that you don‚Äôt have a programmer\u0026rsquo;s brain, or feeling that you‚Äôll never understand anything.\nHow is that helpful? It isn‚Äôt.\nThe way we talk to each other (even to ourselves) impacts our performance. It‚Äôs not self-help BS. It‚Äôs how our brain works.\nAs Dr. Lisa Feldman Barrett, one of my favorite neuroscientists, shows in this short video, \u0026ldquo;The Power of Words is in the wiring of your brain\u0026rdquo;:\n   You see, transitioning into tech is going to take more than just improving your coding skills.\nAs a self-taught developer, you also need to learn how to learn and to manage the hard times.\nThe purpose of this guide is to help you use your determination to build up a ladder you can climb instead of digging yourself into a hole üï≥Ô∏è.\nLet\u0026rsquo;s learn how!\nThe Unstuck Guide for Self-Taught Developers These Thoughts and Questions will help you re-frame your perspective when you\u0026rsquo;re feeling in a rut on your coding journey.\nHere is how it works:\nThe ‚ùå is the Negative inner voice that doesn\u0026rsquo;t help you. It\u0026rsquo;s a sign it\u0026rsquo;s time to change your perspective.\nThe üí≠ is a Thought to help you see things from a different perspective. Our brains are really good at making us believe that what we feel and think is true, even when it\u0026rsquo;s not.\nThe ‚ùî are open-ended Questions that can help you get closer to a solution.\n ‚ùå I am so dumb.\nüí≠ I\u0026rsquo;m not the only one struggling to transition into tech. I am doing what I can!\n‚ùî Is this how I want to be feeling? What can I learn from this situation?\n ‚ùå I will never understand any of this.\nüí≠ Feeling frustrated is natural. I can choose to see this as an opportunity to develop my problem-solving skills.\n‚ùî What am I missing? Who can I reach out to and ask for help?\n ‚ùå I don\u0026rsquo;t know enough to figure out what\u0026rsquo;s going on.\nüí≠ I\u0026rsquo;m learning and I\u0026rsquo;m getting better every day. Figuring things out is part of the journey.\n‚ùî What makes more sense to do now? What questions can I ask?\n ‚ùå I\u0026rsquo;m so slow at coding. Everyone else is faster than me.\nüí≠ There\u0026rsquo;s no way I can know for a fact how other people are doing. Everyone is different and has their own pace.\n‚ùî What assumptions am I making?\n ‚ùå I\u0026rsquo;m not good enough at programming.\nüí≠ I am good enough. This is a moment of frustration and I choose to take care of myself.\n‚ùî How else can I think about my coding journey?\n ‚ùå I will never get an early career developer job.\nüí≠ It\u0026rsquo;s a tough market out there for anyone without experience. Even experienced developers are getting rejected.\n‚ùî What is possible? What are my choices?\n  The Unstuck Guide for Self-Taught Developers   Get the byte-sized version üëà\n Next time you feel like you can\u0026rsquo;t see a solution for your problem, go through the Thoughts and Questions from this guide. Bonus points if you go through this guide after you take a mental break üß†.\nLearning how to develop a growth mindset will make a big difference. That\u0026rsquo;s what I wanted someone had told me when I was transitioning to tech. Now, I want to be that person for you üå±.\nBookmark this post, print your Cheat Sheet and share it with your friends that need to read this ‚≠ê.\n Did you like this article? Then you're gonna love these other ones:\n  Dev With No Experience? Here\u0026rsquo;s one way to get experience today.   Get unstuck on your coding exercise with Just One Exercise   Worried you don\u0026rsquo;t contribute to your team as an early career software engineer?   ","permalink":"https://www.stefannibrasil.me/posts/unstuck-guide-self-taught-devs/","summary":"When you get stuck, it‚Äôs really easy to block yourself from creatively solving your problem.\nYou start asking \u0026ldquo;why am I so dumb?\u0026rdquo;, or thinking that you don‚Äôt have a programmer\u0026rsquo;s brain, or feeling that you‚Äôll never understand anything.\nHow is that helpful? It isn‚Äôt.\nThe way we talk to each other (even to ourselves) impacts our performance. It‚Äôs not self-help BS. It‚Äôs how our brain works.\nAs Dr. Lisa Feldman Barrett, one of my favorite neuroscientists, shows in this short video, \u0026ldquo;The Power of Words is in the wiring of your brain\u0026rdquo;:","title":"The Unstuck Guide for Self-Taught Developers"},{"content":"You\u0026rsquo;re working on your coding project. Everything is going well.\nBut it doesn\u0026rsquo;t take too long until you get stuck on your assignment. You try everything you possibly can, with the resources you have.\nYou are mixing Ruby, JavaScript, Postgres. Doing crash courses, googling. You go to the docs but you don\u0026rsquo;t even know where to look. It\u0026rsquo;s almost as if it\u0026rsquo;s a foreign language.\nOn StackOverflow, you see the same tips over and over. You\u0026rsquo;ve tried them all so many times you\u0026rsquo;re sure you didn\u0026rsquo;t miss them.\nNothing helps. And you know you tried everything. You tried different paths just to get stuck in the mud. Arrggggh.\nIt\u0026rsquo;s as if you\u0026rsquo;re driving somewhere. You want to set the destination on your GPS. But you don\u0026rsquo;t even know the name of the place you\u0026rsquo;re going. Everybody speaks another language and there is no map.\nYou start going through a crisis. That one that almost convinces you that quitting it all together and moving on is better üòî.\nYep, that sucks.\nWhen you reach that level of frustration, continue focusing on the problem will do more harm than good. It\u0026rsquo;s time to try something else.\nHere\u0026rsquo;s the thing: getting stuck is human. As Einstein once said:\n We cannot solve our problems with the same thinking we used when we created them.\n But that doesn\u0026rsquo;t mean you\u0026rsquo;ll be stuck forever. By the end of this post, you\u0026rsquo;ll learn one simple exercise for you to develop problem-solving skills for your coding career (and for life).\nWhen you\u0026rsquo;re stuck, switch your focus. Let\u0026rsquo;s get this straight: getting stuck sucks. But it\u0026rsquo;s part of life.\nHere are some tips to help you cool down and see things from a different viewpoint:\n Switch your focus entirely. If you are really tired, go for a walk. Do something else. No multi-tasking! When you feel refreshed, draw a map of your problem. Yep, pen and paper ‚úçÔ∏è!  Then, ask yourself these questions:\n Where do you want to go? Where are you now? What is the next single step to get closer to your destination?  Coding is not straightforward and you can get stuck in the first step of a tutorial (been there, done that).\nIt\u0026rsquo;s okay to struggle\u0026hellip; because if you already knew all of this stuff, why would you need to learn them?\nThat‚Äôs the growing pain of navigating unknown territories. You\u0026rsquo;ve got to beat your own path and explore. Draw your own map as you go üß≠.\n Enjoy the journey while getting to your destination. And if you don\u0026rsquo;t finish your assignment or task, it\u0026rsquo;s okay. You always get to try again, my friend üí´.\nRemember that exploring with a group is easier. Others might have explored more and can teach you a thing or two. Check out CodeBuddies and CodeNewbies.\nBookmark this post for the next time you get stuck and share it with your friends!\n Did you like this article? Then you're gonna love these other ones:\n  Dev With No Experience? Here\u0026rsquo;s one way to get experience today.   The Unstuck Guide for Self-Taught Developers   Worried you don\u0026rsquo;t contribute to your team as an early career software engineer?   ","permalink":"https://www.stefannibrasil.me/posts/stuck-on-programming-problem/","summary":"You\u0026rsquo;re working on your coding project. Everything is going well.\nBut it doesn\u0026rsquo;t take too long until you get stuck on your assignment. You try everything you possibly can, with the resources you have.\nYou are mixing Ruby, JavaScript, Postgres. Doing crash courses, googling. You go to the docs but you don\u0026rsquo;t even know where to look. It\u0026rsquo;s almost as if it\u0026rsquo;s a foreign language.\nOn StackOverflow, you see the same tips over and over.","title":"Get unstuck on your coding exercise with Just One Exercise"},{"content":"You got that first job as an early career software engineer after a long job hunt. You are ready to learn a lot and advance in your career.\nMost times you\u0026rsquo;re fine, but sometimes you worry that you don\u0026rsquo;t contribute much value to your team. That you ask stupid questions all the time. Or that you don\u0026rsquo;t have the domain-specific knowledge required to estimate tickets accurately or to handle bugs quickly.\nDo you think that you slow your team down?\nEven though you\u0026rsquo;ve had a career in something else and you were very proficient at it, you are not feeling like a team player at your new job.\nHere\u0026rsquo;s another way to look at this: if you\u0026rsquo;re always learning and helping your team, you are contributing positively.\nThe truth is I\u0026rsquo;ve met lots of \u0026ldquo;senior\u0026rdquo; devs who didn‚Äôt contribute positively to the team. Their effect was quite negative, to be honest. They are still in the industry getting a senior salary and not having a single doubt about their skills.\nWhat you lack is mainly self-confidence. Well, here\u0026rsquo;s some good news: self-confidence is also a skill and as such, can be learned.\nBy the end of this post, you\u0026rsquo;ll learn four tips for developing more confidence in your skills, feel the impact of your work, and be respected by your teammates.\n1. Test the assumptions your team has It\u0026rsquo;s not only because you have fresh eyes on the code. It\u0026rsquo;s also because you\u0026rsquo;ll be stressing out the current implementation. Reading things for the first time will surface a lot of unclear business domain logic.\nGet pen and paper and take notes of your detective work. Go through the app and make a note of what you are not sure about.\n What is new to you? What is surprising? What seems odd?\n How are the tests written? Do they even have a test suite? Why not?\nAsk questions. First, to yourself. Make sure to go through them in your head and explain the problem to yourself. Often, this will answer your questions and improve your problem-solving skills.\nIf that doesn\u0026rsquo;t work, ask a teammate. It\u0026rsquo;s always good to explain what you\u0026rsquo;ve tried, what you are trying to achieve, and where you are stuck.\nIf you\u0026rsquo;re afraid to ask, know that people who ask good questions are better teammates than people who only give answers their criticism.\nThen, propose changes. If you feel that the team would be open to tiny changes without a discussion, go ahead. Otherwise, say what your proposed alternative is and implement them in the following days.\n2. Improve documentation and communication processes You might have heard that improving documentation and processes are \u0026ldquo;soft skills\u0026rdquo;. I have only heard this from people that don\u0026rsquo;t care about communication or teamwork. I wouldn\u0026rsquo;t trust their advice.\nA few ideas are:\n Create some PR templates for your team GitHub actions to automate some repetitive tasks, like running the test suite on CI. Dashboard that automates something your team is doing manually because no one has time to do them Improve the onboarding experience  What can you apply from your past experiences in your new job? Do you see an opportunity to take advantage of your experience? üí≠\nThere are tons of ways you can use your coding skills to help your team üå†.\n3. Automate a tedious/repetitive routine If you\u0026rsquo;re working in a team, you\u0026rsquo;re probably interacting with QA\u0026rsquo;s, Product Managers, etc. Do you see any opportunities for helping them?\nMaybe a script that helps them review things more accurately, or an automated test so they don\u0026rsquo;t have to remember testing everything manually?\nA business is always looking for ways to cut down expenses or time :)\nOh, don\u0026rsquo;t forget to log all your initiatives and improvements for next time the self-doubt kicks in and you want to show them you\u0026rsquo;re not an impostor. Plus, it will be useful when you\u0026rsquo;re negotiating your next promotion üòâ.\nNote that you\u0026rsquo;re not expected to fix or automate everything. The way to look at this is to ask yourself: is there a framework for making better decisions that you have used in the past?\n4. Continue investing in self-education Most companies are willing to support you paying for Education. I mean, why wouldn\u0026rsquo;t they?\nDo you have an idea of how to improve a module or a class but you\u0026rsquo;re afraid to do so because the code is obscure and you are afraid to break things? Or do you have an idea of how to do something better but you don\u0026rsquo;t know how to get started by yourself?\nFind the person in the team who likes to see you growing and spend more time with them. If there isn\u0026rsquo;t such a person in your company, find them somewhere else.\nYou\u0026rsquo;ll learn a lot on the job but depending on the company or team, you might learn only bad practices. Don\u0026rsquo;t be stuck for years doing what you are doing. Instead, invest in advancing your skills.\nAlways have an escape plan. There\u0026rsquo;s no better plan than investing in yourself.\nAlternatively, you can do self-paced training at work every day. Block a 30min event on your calendar to be your first task in the day. You can use this time to improve your coding, testing, or debugging skills.\n I hope that by now, you\u0026rsquo;ve realized that your worthiness is not directly related to how much code you write. And you know it\u0026rsquo;s not always about the code. And that technical skills can be learned because you just did that.\nIf they hired you, it\u0026rsquo;s because they want you to be part of the team. You may be the one setting too high expectations for yourself.\nIf you found these tips helpful, share this post with your friends!\nYou got this. I\u0026rsquo;m rooting for you.\n Did you like this article? Then you're gonna love these other ones:\n  Dev With No Experience? Here\u0026rsquo;s one way to get experience today.   The Unstuck Guide for Self-Taught Developers   Get unstuck on your coding exercise with Just One Exercise   ","permalink":"https://www.stefannibrasil.me/posts/contribute-team-early-career-software-engineer/","summary":"You got that first job as an early career software engineer after a long job hunt. You are ready to learn a lot and advance in your career.\nMost times you\u0026rsquo;re fine, but sometimes you worry that you don\u0026rsquo;t contribute much value to your team. That you ask stupid questions all the time. Or that you don\u0026rsquo;t have the domain-specific knowledge required to estimate tickets accurately or to handle bugs quickly.","title":"Worried you don't contribute to your team as an early career software engineer?"},{"content":"You show your GitHub project to people but they don\u0026rsquo;t understand what the code is about. Why should you take time to write a good README if they can simply \u0026ldquo;read the code\u0026rdquo;?\nThey won\u0026rsquo;t even look at your code if you don\u0026rsquo;t explain what\u0026rsquo;s in it for them. Why should anyone care about it?\nWhat about making them curious about your project? It saves them time, it shows you care about good communication and that by writing good docs you probably write good code as well.\nIn the end, we write code for humans üòâ.\nBy the end of this post, you\u0026rsquo;ll know how to:\n Write simple yet exciting READMEs for your GitHub projects. How to improve your chances of making a good impression next time you send a potential employer a link to your GitHub portfolio.  It may seem too much to learn and you\u0026rsquo;ll probably feel overwhelmed. Use this as a reference and do the homework. That\u0026rsquo;s a good starting point.\nLet\u0026rsquo;s get started!\nImprove your GitHub profile Start by doing an \u0026lsquo;audit\u0026rsquo; on your profile:\n  Each project should live in a differente repository. Your GitHub profile becomes a portfolio by itself. Add a personal README and up to 4 projects that you want people to see first. See my GitHub README as an example.\n  Write about you in your user section. Tip: instead of adding \u0026ldquo;I\u0026rsquo;m a early career developer looking for opportunities\u0026rdquo;, use powerful words that describe your skills. For example: \u0026ldquo;I help charities make data-driven decisions with Python\u0026rdquo;.\n  Position yourself as someone who provides value and not \u0026ldquo;someone learning how to code\u0026rdquo;. You\u0026rsquo;ll always be learning. Drive the focus to the value you generate instead.\nHow to write a good README Connect with your readers. Put yourself in their shoe\u0026rsquo;s and avoid jumping to conclusions.\nAlways assume it\u0026rsquo;s someone new that is learning. Do they know which commands to run on the terminal? How to navigate through the project\u0026rsquo;s folders? What do they need to know about your project?\nEven if they have experience with the programming language, they may have forgetten how to run commands. Readers from all levels will be able to appreciate your work.\nTip: Let\u0026rsquo;s say you need to run this project on another computer. Would you know all the steps needed to install it again? Probably not. If not for others, do it for yourself.\nThe \u0026lsquo;How to Get Started\u0026rsquo; section The How to Get Started section tells the user which commands they will run and anticipate any dependencies they need to install first.\nHere\u0026rsquo;s an example of a How to Get Started section for a Rails app:\nThis project depends on libexif. If you're on a mac, run `brew install libexif` to install it. Run `git clone my_github_project` to clone the project. Run `cd my_github_project \u0026amp;\u0026amp; bin/setup` to install dependencies. Then, run `rake install` to install this gem onto your local machine. Run `app export` to generate a CSV file with the Exif data. Run `cat output/*.*`. If you see a list of files, this means your setup is correct. If relevant, add code snippets or images. Check out Carbon for creating awesome code snippets. Show, don\u0026rsquo;t tell.\nBonus tip: uninstall the project and go through the process of installing it again. If you had problems with one command, add \u0026ldquo;If you run into this error, run this command\u0026rdquo;.\nHomework: Write a Badass README  Choose one of your projects. Use this README checklist as a template. Review your README using the questions proposed on Tips for writing a good README. Congratulate yourself for developing a new skill ü•≥.  Good companies value good communication. I\u0026rsquo;ll never forget when the CTO of my first internship said: \u0026ldquo;you write well, that\u0026rsquo;s a good indicator that you have the skills to write good code, too\u0026rdquo;. It opened my eyes to how much communication skills matter. It matters to you, too!\nWrite good docs, write good code, make your readers happy. See you next time üëã.\n Did you like this article? Then you're gonna love these other ones:\n  Dev With No Experience? Here\u0026rsquo;s one way to get experience today.   The Unstuck Guide for Self-Taught Developers   Get unstuck on your coding exercise with Just One Exercise   ","permalink":"https://www.stefannibrasil.me/posts/github-readme-examples-and-template/","summary":"You show your GitHub project to people but they don\u0026rsquo;t understand what the code is about. Why should you take time to write a good README if they can simply \u0026ldquo;read the code\u0026rdquo;?\nThey won\u0026rsquo;t even look at your code if you don\u0026rsquo;t explain what\u0026rsquo;s in it for them. Why should anyone care about it?\nWhat about making them curious about your project? It saves them time, it shows you care about good communication and that by writing good docs you probably write good code as well.","title":"How to write Badass READMES for your Github projects"},{"content":"Let\u0026rsquo;s say you\u0026rsquo;re learning how to paint. When you look at the famous paintings at the museum, you might start asking yourself:\n\u0026ldquo;Will I ever be this good? Is this for me? Will I ever understand all of this?\u0026rdquo;\nIf these questions sound familiar, it\u0026rsquo;s because you\u0026rsquo;re not alone. It\u0026rsquo;s not just you.\nBelieve it or not, the same questions can be applied to coding. Some things, like painting and learning how to code, are hard. Transitioning into tech is hard.\nIn case you need a boost of inspiration and to be reminded that it\u0026rsquo;s possible to make it happen, here\u0026rsquo;s a list of a few successful Rails developers that come from unusual backgrounds.\nEileen Utchichetlle How many photographers do you know that have turned out to be developers? Eileen is one of them! She has a BFA in Photography and she worked on magazine layout, email marketing, as well as editing as a Production Designer for 2 years before she decided to change her career.\nShe\u0026rsquo;s now a Principal Software Engineer at GitHub. She\u0026rsquo;s also a member of the Rails Core Team and the Rails Security Team.\nEileen has given lots of talks and keynotes, despite being afraid of public speaking!\nAndromeda Yelton Andromeda is a librarian and technologist. She used to work as a math major and a middle school Latin teacher. Eventually, she got a library degree and ended up working in a library technology startup.\nShe transitioned into web development by doing software contract work (Python/Django) to help librarians learn to code through teaching, speaking, and writing.\nShe\u0026rsquo;s now a full-time software engineer, building things that empower people through code. She inspires others to combine their skills to bring more perspectives to the software world.\nLovisa Svallingson (in memoriam) This is how Lovisa described her skills:\n\u0026ldquo;With a background in languages, working with people, and various creative endeavors, I bring a unique and well-rounded perspective to the work I do\u0026rdquo;.\nLovisa\u0026rsquo;s background was in languages and she was an English teacher. Later on, she attended the Turing School of Software and Design.\nLovisa passed away and I want to dedicate this post in her honor. She was a Bootcamp graduate\u0026rsquo;s Advocate and she wanted to help more people who are transitioning into tech, just like you.\nMay her time here on Earth be an example that your diverse background is your strength.\nDr. Barbara Oakley Note: cheating a bit here because Dr. Oakley is not a Rails developer but consider this a bonus material :)\nDr. Barbara has a B.A. in Slavic Languages and Literature. Later on, she decided to study Engineering.\nShe has written lots of books about how to learn effectively, all backed up by Neuroscience. She is the creator of the most famous MOOC free course called Learning how to Learn.\nShe\u0026rsquo;s an advocate of having multiple backgrounds as it can give you more insights on your new journey.\nChanging careers signals that you\u0026rsquo;re constantly learning new things! It\u0026rsquo;s an example that learning is part of your lifestyle. You\u0026rsquo;re being mentally flexible.\n What do they all have in common? It took them years to get where they are today. But they all started somewhere and they embraced their diversity. I\u0026rsquo;m pretty sure they once felt the same as you.\nTake a deep breath now. Can you imagine all the great things you will accomplish after you become a developer? The world is big enough for your ambitions, keep going!\nIf you still need some extra inspiration, I highly recommend you watching this amazing Ted Talk from Amy Cuddy called Your body language may shape who you are. Go check it out.\nI hope you\u0026rsquo;re feeling a bit more relaxed and inspired! Feel free to bookmark this post for these days when you need some inspiration again, and share it with your friends ‚ú®.\n Did you like this article? Then you're gonna love these other ones:\n  Dev With No Experience? Here\u0026rsquo;s one way to get experience today.   The Unstuck Guide for Self-Taught Developers   Get unstuck on your coding exercise with Just One Exercise   ","permalink":"https://www.stefannibrasil.me/posts/examples-successful-self-taught-developers/","summary":"Let\u0026rsquo;s say you\u0026rsquo;re learning how to paint. When you look at the famous paintings at the museum, you might start asking yourself:\n\u0026ldquo;Will I ever be this good? Is this for me? Will I ever understand all of this?\u0026rdquo;\nIf these questions sound familiar, it\u0026rsquo;s because you\u0026rsquo;re not alone. It\u0026rsquo;s not just you.\nBelieve it or not, the same questions can be applied to coding. Some things, like painting and learning how to code, are hard.","title":"Examples of Successful Self-Taught Developers"},{"content":"\u0026ldquo;Why is it so difficult to find Junior Ruby on Rails dev roles?\u0026quot;\nYou have finished multiple online courses, workshops and might even read some books to learn Ruby. You start job hunting and you struggle to land a position because of your lack of experience.\nSo how do you get experience with large Ruby and Rails apps when no one wants to hire early-career devs?\nIt\u0026rsquo;s a tough market for any early-career dev with little to no experience, so it\u0026rsquo;s no different with Ruby. You\u0026rsquo;re not alone, my friend!\nIf you don\u0026rsquo;t know what else you can do besides doing another tutorial or starting another small Ruby project, here\u0026rsquo;s an idea for you: contribute to Rails.\n\u0026ldquo;Wait, what? Me? Contribute to Rails? I\u0026rsquo;m just starting my career!\u0026rdquo;\nI know. This is not usually recommended as a beginner-friendly open source project but here\u0026rsquo;s something you probably haven\u0026rsquo;t thought about yet.\nWhat if you learned Ruby on Rails from the source? Now that you have done tiny apps it\u0026rsquo;s time to try something different.\nRails can be daunting. It\u0026rsquo;s so abstract and complex. I feel the same!\nHowever, just by lurking around you\u0026rsquo;ll see how a large project is designed and maintained.\nThis might not seem like it\u0026rsquo;s important but you\u0026rsquo;ll be learning how to:\n read other people\u0026rsquo;s code; read documentation; write good documentation, commits, and Pull Requests; navigate in a large codebase; ask for and do code reviews; improve your communication skills (super important for remote jobs);  Believe it not, these things are what you\u0026rsquo;ll be doing most of the time as a developer.\nYou will have a better understanding of the tool you\u0026rsquo;re using every day. Can you imagine how cool it can be to use those skills on your projects? Interesting topics to discuss on interviews, huh?\nHow does this approach help me get a job? Although this won\u0026rsquo;t guarantee you\u0026rsquo;ll land a job soon, it certainly will help you develop competitive advantages. A few examples:\n Apply your lessons on your projects (great for your portfolio!); Write blog posts or present a talk teaching others how to understand a specific module; You will feel like a badass! Plus, it\u0026rsquo;s a way to show you have good initiative; Some companies allow skipping the whiteboard interview if you have interesting open-source contributions; You\u0026rsquo;ll be connected with more experienced/expert Ruby devs; You\u0026rsquo;ll be putting yourself out there instead of just learning on your own.  But first, you need to get started.\nHow to get started with contributing to Rails Go to the Rails GitHub repository. Choose one module. ActionPack, for example, is a good option because it doesn\u0026rsquo;t require any database drivers configuration.\nChoose one merged Pull Request (suggestions: this or this one) to get started. You probably won\u0026rsquo;t understand either of the PRs. Don\u0026rsquo;t panic, that\u0026rsquo;s expected! Keep reading.\nWhen you take a look at the PRs, you\u0026rsquo;re not expected to understand the changes. The goal is to ask yourself: Why were the changes were made? How did the author approach it? How was the code review given? Was the author a regular contributor? Did the issue have reproducible steps?\nWhat can you learn from it? Nothing is a valid answer although I\u0026rsquo;m pretty sure you at least learned that it\u0026rsquo;s not beginner-friendly. That\u0026rsquo;s something, right?\nYou can even go one step further: could you learn a thing or two about Ruby? Is it touching the controllers, the models, the views? What is the context?\nRinse and repeat until you feel like you\u0026rsquo;re starting to understand how things are done on the project. It\u0026rsquo;s going to take some time.\nEventually, you\u0026rsquo;ll feel more confident to work on an issue. However, when you go through the Rails documentation, you\u0026rsquo;ll know this is just one of many ways to contribute to the project üòâ.\nBut Rails is scary! What if I get stuck all the time? It\u0026rsquo;s going to be difficult. Remember: Rails is super hard. But the goal is not to aim to understand it for now. The goal is to get familiar with large codebases, learning how to find yourself in a new codebase, seeing how people ask questions, give code reviews, reading the docs.\nThese are normal things you\u0026rsquo;ll do on the day-to-day as a developer. It\u0026rsquo;s a good opportunity to practice asking good questions and learn how to get unstuck. These are valuable skills for your career.\nGive it a try. Set an event on your calendar to do this for at least 1 hour every week. Write down your progress, celebrate every tiny lesson, and see what happens.\n Did you like this article? Then you're gonna love these other ones:\n  Dev With No Experience? Here\u0026rsquo;s one way to get experience today.   The Unstuck Guide for Self-Taught Developers   Get unstuck on your coding exercise with Just One Exercise   ","permalink":"https://www.stefannibrasil.me/posts/tech-job-hunt-with-no-experience/","summary":"\u0026ldquo;Why is it so difficult to find Junior Ruby on Rails dev roles?\u0026quot;\nYou have finished multiple online courses, workshops and might even read some books to learn Ruby. You start job hunting and you struggle to land a position because of your lack of experience.\nSo how do you get experience with large Ruby and Rails apps when no one wants to hire early-career devs?\nIt\u0026rsquo;s a tough market for any early-career dev with little to no experience, so it\u0026rsquo;s no different with Ruby.","title":"On the Job Hunt? Try this one thing to get experience as an early career Ruby dev"},{"content":"Now that all Rails Conf 2021 talks, keynotes and workshops are available on YouTube, you might be wondering which ones you should watch first.\nIf you are just getting started with your Rails or programming journey, here\u0026rsquo;s a list of 6 talks for you (with resources):\n1. Implicit to Explicit: Decoding Ruby\u0026rsquo;s Magical Syntax by Justin Gordon [Talk] Do you wish you could understand better what Rails does under the hood? This talk is a great reference for anyone starting with Ruby and Rails. Bonus: learn some Pry Debugger tips to help you demystify any Ruby code.\nSlides can be found here.\n2 Believe in the Rails Magic: Unlock the Power of Rails by Learn Academy [Workshop] Do you want to learn more about how does the MVC pattern work? Then this one if for you. You\u0026rsquo;ll create a simple CRUD app with a step by step guide on what which command is doing. You\u0026rsquo;ll learn how does the routes, controllers, views and models interact with each other.\nGithub repository can be found here and the slides here.\n3. Intro to Test Driven Development: How to Safely Make Changes by Zack Pieper [Workshop] Capybara? Rspec? Mini Test? What is the difference between them? Is the syntax making you feel confused?\nThen definitely follow along with this workshop. It\u0026rsquo;s a nice introduction to TDD and Rails testing in general.\nResources to follow along can be found here.\n4. Hotwire: HTML over the wire by Noel Rappin [Workshop] For Rails beginners, Hotwire is great because you can focus on improving your Rails skills without worrying too much about front end yet. For experienced Rails devs, Hotwire will make you feel less depressed about front-end.\nIn this workshop, you get to practice Hotwire by adding realtime frontend changes to a Rails app. You can find the code to follow along here.\nFor more on Hotwire, you might also want to check out Hotwire Demystified by Jamie Gaskins. This talk breaks down Hotwire basics, as well as the tradeoffs between SPAs and Hotwire.\n5. OAuth 2.0 Deconstructed by Peter Jang [Workshop] Did you ever wanted to understand OAuth better? Looking at the charts showing you all the callbacks and tokens going back and forward doesn\u0026rsquo;t help that much.\nThis workshop is a nice intro to OAuth behind the scenes. You will implement OAuth from scratch for several providers (Shopify and GitHub) on a Sinatra app.\nGithub repo to follow along can be found here.\n6. How to be a great developer without being a great coder by Nicole Carpenter [Talk] This is a nice talk to watch when you need to be reminded that being a great developer is more than just mastering technical skills.\nThere are no resources for this one, so just watch it and get a boost of motivation.\n7. All the Things I Thought I Couldn\u0026rsquo;t Do by Eileen Uchitelle [Keynote] Watch this one whenever you need to get some motivation. Eileen was a photographer and she is now a Rails core maintainer. This is a kind reminder that everyone starts somewhere!\n These are the top 5 Rails conf 2021 talks that stood out to me. Which one did you like most and that you think I should add here?\n Did you like this article? Then you're gonna love these other ones:\n  On the Job Hunt? Try this one thing to get experience as an early career Ruby dev   Contribute to Ruby on Rails: filtering \u0026amp; reproducing issues   Open Source Thursdays   ","permalink":"https://www.stefannibrasil.me/posts/rails-conf-2021-talks-early-career-devs/","summary":"Now that all Rails Conf 2021 talks, keynotes and workshops are available on YouTube, you might be wondering which ones you should watch first.\nIf you are just getting started with your Rails or programming journey, here\u0026rsquo;s a list of 6 talks for you (with resources):\n1. Implicit to Explicit: Decoding Ruby\u0026rsquo;s Magical Syntax by Justin Gordon [Talk] Do you wish you could understand better what Rails does under the hood?","title":"Rails Conf 2021 Talks for Early Career Devs"},{"content":"In the last Open Source Thursdays live, Thiago and I shared how we chose a few issues that looked promising for us.\nBy the end of the post, you\u0026rsquo;ll learn how to filter issues, and how to start contributing to Rails by reproducing a bug.\nHow to choose your first Ruby on Rails issue Which one from the +300 open issues should you pick? We tried breaking this process down into 2 parts: filtering them by labels, then choosing one that seems easier to fix.\nWe went through the open issues and here\u0026rsquo;s what we found:\n There are no open issues labeled good first issue, so you have to search for some good ones; Most of the open issues are labeled as stale. We ignored those; Issues labeled with reproduction steps look promising because it\u0026rsquo;s easier to work with them when you\u0026rsquo;re starting. When we saw the gist with the steps to reproduce the issue we didn\u0026rsquo;t know how to run it! We learned that you can run a Rails app that is just a single ruby file by using the bundler/inline feature.  We recommend this flow because you would be able to easily reproduce the error, add tests, fix the error, and prove that the fix really works.\nIf that\u0026rsquo;s something you\u0026rsquo;re up to do, keep reading!\nYour Homework: choose your issue to reproduce Go to the rails issues page and follow these steps:\n Remove the issues labeled as stale; Ignore the issues that already have a Pull Request; Choose the ones that have the label with reproduction steps; Bookmark at least 3 issues that look promising to you; Set a 10 minutes timer and choose just one; Set a 30 minutes timer and try to reproduce the issue.  What did you find? What questions do you have about the issue? Do you have a solution to propose?\nMost experienced contributors are happy to help. I wasn\u0026rsquo;t sure what to do next with the issue we reproduced, so I added a comment on the issue to ask for guidance.\nSo that\u0026rsquo;s where we stopped. Next time, we will actually start working on the issue.\nStay tuned for the next steps!\n Did you like this article? Then you're gonna love these other ones:\n  On the Job Hunt? Try this one thing to get experience as an early career Ruby dev   Rails Conf 2021 Talks for Early Career Devs   Open Source Thursdays   ","permalink":"https://www.stefannibrasil.me/posts/contribute-to-rails-github-part-2/","summary":"In the last Open Source Thursdays live, Thiago and I shared how we chose a few issues that looked promising for us.\nBy the end of the post, you\u0026rsquo;ll learn how to filter issues, and how to start contributing to Rails by reproducing a bug.\nHow to choose your first Ruby on Rails issue Which one from the +300 open issues should you pick? We tried breaking this process down into 2 parts: filtering them by labels, then choosing one that seems easier to fix.","title":"Contribute to Ruby on Rails: filtering \u0026 reproducing issues"},{"content":"What is Open Source Thursdays? Open Source Thursdays is a new project from the hexdevs team, aka me and Thiago.\nWe started this project because we\u0026rsquo;ve always wanted to contribute to rails! So we thought, why not do it live so more people can join us? Our goal is to make open source contributions more popular.\nNeither of us has done this before. The plan is to get there and do everything live, no preparing in advance. Just the real work.\nHow can I join? We always schedule the next lives a few days in advance. You can set a reminder to get notifications of when we go live by subscribing to our channel.\nEven if you don\u0026rsquo;t have the time or can\u0026rsquo;t join us live, you can still learn and contribute to rails on your own. I write a summary with the highlights and lessons from every live session to guide you. You can find them here.\nOpen Source Thursdays Lives All previous lives can be accessed here:\n See you on our next live!\n","permalink":"https://www.stefannibrasil.me/posts/open-source-thursdays/","summary":"What is Open Source Thursdays? Open Source Thursdays is a new project from the hexdevs team, aka me and Thiago.\nWe started this project because we\u0026rsquo;ve always wanted to contribute to rails! So we thought, why not do it live so more people can join us? Our goal is to make open source contributions more popular.\nNeither of us has done this before. The plan is to get there and do everything live, no preparing in advance.","title":"Open Source Thursdays"},{"content":"If you\u0026rsquo;re someone who decided to change careers to work as a web developer, then you might be having a hard time trying to land your first job. You aren\u0026rsquo;t alone.\nWe all have heard that there are tons of tech jobs in the market but there aren\u0026rsquo;t qualified professionals to fulfill them. So you go and spend days doing online courses and getting certifications so you can join the wave. Doing this is great to get started but they can only help you at a certain point.\nAlright, what else can I do? How do I get experience if no one is willing to give me an opportunity to even get started? Sorry to bring bad realistic news, but no one will give you an opportunity. You have to create yours.\nJust practicing your coding skills isn\u0026rsquo;t enough When I was learning how to code a few years ago, I would \u0026lsquo;practice\u0026rsquo; my coding skills by following online tutorials and creating tiny apps. This was a great way to get started but eventually, I reached a limit. I needed to get real experience, otherwise, I wouldn\u0026rsquo;t get out of the tuto hell world.\nI knew I didn\u0026rsquo;t have any experience to apply for jobs, so I had to try something else. I went to local meetups, I gave talks, I attended 2-days workshops until one day I applied to be a coach in one of them. Besides that, I also shared my journey and coding studies on my blog.\nBecause I was putting myself out there and I had great communication skills, I landed my first internship. There are no guarantees this works 100% of the time but it creates more opportunities than just do another course.\nLanding this internship wasn\u0026rsquo;t easy and I almost gave up because I couldn\u0026rsquo;t finish the coding challenge! I was so focused on what I lacked that I couldn\u0026rsquo;t see what I had to contribute.\nIt\u0026rsquo;s easy to focus too much on technical skills and forget about the other skills that make you a better professional. Yes, you will be coding on a computer but your work will be designed, reviewed evaluated, and used by humans.\nCan you see the difference between \u0026ldquo;keep practicing\u0026rdquo; and actively creating your opportunities?\nYou don\u0026rsquo;t need to know everything. No one does. You learn by actively putting yourself out there, and not by doing another workshop, especially when you already have done several of them.\nSchools and colleges are living proofs that \u0026lsquo;learning\u0026rsquo; in a controlled environment doesn\u0026rsquo;t guarantee you\u0026rsquo;ll know how to solve problems when you\u0026rsquo;re out there in the real world.\nYou don\u0026rsquo;t need to get a dev job to get experience After you understand and apply the basic concepts of programming, the fastest you grasp opportunities to immerse yourself in real-world projects and working with others, the faster you\u0026rsquo;ll advance your coding skills.\nWhenever you spot one of these, do it without hesitating (unless, of course, it\u0026rsquo;s an unpaid internship by a company making lots of money).\nIt doesn\u0026rsquo;t matter if it\u0026rsquo;s an internship, open-source contributions, or solving a problem for a friend/family member as a freelancer professional. Important to mention that even landing an internship is also competitive but it might lead to a full-time job offer.\nBy applying what you\u0026rsquo;ve learned in a direct approach like this you\u0026rsquo;ll know what you don\u0026rsquo;t know. It\u0026rsquo;s way better than learning every best way to implement this Rails or that React feature. Do it, learn, keep doing this.\nIf you decide to keep practicing on your own (aka, continue doing what you\u0026rsquo;re doing) you already know the results. It\u0026rsquo;s like always working out the same muscle with the same weights at the gym: it\u0026rsquo;s cozy, it feels like progress and everything will stay the same. It also means you can\u0026rsquo;t complain about the outputs if the inputs are always the same.\nOh, and next time you\u0026rsquo;re convinced you should wait until you have learned x, y or z to apply for jobs, try this: put a white male U.S. senator cape, leap through the doubt and show up. Thanks, Leslie Knope.\nWhat do you have to lose? You\u0026rsquo;ve already done something brave: you changed your career, and learned how to code! Keep challenging yourself. The best is yet to come!\n Did you like this article? Then you're gonna love these other ones:\n  Dev With No Experience? Here\u0026rsquo;s one way to get experience today.   The Unstuck Guide for Self-Taught Developers   Get unstuck on your coding exercise with Just One Exercise   ","permalink":"https://www.stefannibrasil.me/posts/should-i-get-an-internship-or-keep-practicing/","summary":"If you\u0026rsquo;re someone who decided to change careers to work as a web developer, then you might be having a hard time trying to land your first job. You aren\u0026rsquo;t alone.\nWe all have heard that there are tons of tech jobs in the market but there aren\u0026rsquo;t qualified professionals to fulfill them. So you go and spend days doing online courses and getting certifications so you can join the wave.","title":"Should I Get an Internship or Keep Practicing my Coding Skills?"},{"content":"Step 1: Decide to find one open-source project to contribute üòé\nStep 2: Keep looking üëÄ\nStep 3: They are all intimidating, is that normal? üòë\nStep 4: What if I contributed to a project I have lots of experience with, like rails? I\u0026rsquo;d love to understand more about this tool I use every day ü§î\nStep 5: OMG, the code is huge and scary, Will this even run on my machine? ü•¥\nStep 6: This is not for me. Eventually, I\u0026rsquo;ll find one that is more welcoming to open source beginners like me üòî\nStep 7: That never happens. You will try again after next year\u0026rsquo;s railsconf.\nIf you ever get to the rails repository hoping to contribute you see +384 open issues. Which one should you pick? How do people even get started? Even worse: they all seem pretty hard.\nIf this daunting feeling is familiar to you, welcome to the club my friend because I know how does that feel like. By the end of this post, you\u0026rsquo;ll feel less intimated to contribute to rails today (if you want).\nOpen source onboarding for the rest of us Eileen Uchitelle, from the Rails Core Team Member, mentioned on her railsconf keynote how she got started. She did lots of pair programming with experienced rails contributors.\nBut, you probably don\u0026rsquo;t work for Shopify or Github. At least, I don\u0026rsquo;t.\nThat got me thinking\u0026hellip; what if I don\u0026rsquo;t have to do it by myself?\nSo I recruited Thiago, my partner in crime to do it with me. We tried to make good use of the hexdevs YouTube channel to share our contribution to rails live.\nTo our surprise, Gabi Stefanini, Engineering Team Lead at Shopify, and Rafael Franca (Rails core contributor, also from Shopify) joined us!\nWe didn\u0026rsquo;t expect anyone to show up to be honest, but having them there made us feel less intimated. We also learned a lot doing this chat remote onboarding with them:\n Not sure how to know if you set up rails successfully? Running the test suites means you\u0026rsquo;re good to go üéâ You don\u0026rsquo;t actually need to set up the entire rails project to get started. You can choose one module. We went with ActionPack because it doesn\u0026rsquo;t require any database drivers. After forking and cloning the project, go to the module you want to get started and run the tests to verify the setup (cd activepack then rake tests). Hint: if you get an error, run bundle exec rake test. Contributing to Open Source goes beyond writing code. Reproducing issues or testing patches, translating the guides are all great ways to get started and make a difference with your work. If you found something confusing or missing, why not turn it into a better experience for the next person? Chances are you\u0026rsquo;re not the only one. Keeping the documentation up to date and clear to whoever joins after you is super important to make other beginners get involved. Open source etiquette is learned by\u0026hellip; making contributions. A great way to get started is to look at previous commits and Pull requests. I wasn\u0026rsquo;t sure how to name my branch, my commits, or even my Pull Request but Thiago suggested looking at the previous ones to get an idea. I was super nervous but having someone there was very comforting! The rails documentation is great! Kudos to whoever put effort and time into creating it! Nothing beats the developer experience of having great documentation. Having your first PR merged live was a hell of a surprise!   Here\u0026rsquo;s a 15min talk sharing more:\n  Your Homework: contribute to rails today Go to the rails project on github. Fork it, then clone it. Take a look at the modules there and choose one to get started by making sure you can run its test suite.\nGo through the documentation and see if you can find something that needs to be updated, or translated. Could you try reproducing a bug? Fixing a patch?\nLet me know what you end up doing! Start small but start today. You\u0026rsquo;ll never know how much you\u0026rsquo;ll learn from this experience üôÇ\nIf you found this post useful and want to get involved with contributing to rails with us, you\u0026rsquo;re super invited to join us next time! We want to install rails the easy way using a VM (I found this super cool! You don\u0026rsquo;t need to install all the dependencies by yourself) and be able to run all the tests.\nThe easiest way to get notified is to sign up for my mailing list below, or to subscribe to our YouTube channel to set reminders for next time we go live.\n Did you like this article? Then you're gonna love these other ones:\n  On the Job Hunt? Try this one thing to get experience as an early career Ruby dev   Rails Conf 2021 Talks for Early Career Devs   Contribute to Ruby on Rails: filtering \u0026amp; reproducing issues   ","permalink":"https://www.stefannibrasil.me/posts/how-to-contribute-to-ruby-on-rails-project-on-github/","summary":"Step 1: Decide to find one open-source project to contribute üòé\nStep 2: Keep looking üëÄ\nStep 3: They are all intimidating, is that normal? üòë\nStep 4: What if I contributed to a project I have lots of experience with, like rails? I\u0026rsquo;d love to understand more about this tool I use every day ü§î\nStep 5: OMG, the code is huge and scary, Will this even run on my machine?","title":"How to Contribute to Ruby on Rails Open Source project"},{"content":"Ruby is keeping you interested in transitioning to the software development world. But you\u0026rsquo;re not sure you\u0026rsquo;re gonna be employable. You might have heard that you should just choose JavaScript because, you know, everyone is saying Ruby is a dying domain.\nBut you don\u0026rsquo;t see yourself keeping up with the Kardashians traditional JS web dev world.\nYou\u0026rsquo;ve heard that there are plenty of Ruby/Rails jobs out there. But how do you get your first one as an early career dev?\nHere\u0026rsquo;s a fun activity you can do today to get you moving towards finding your first Ruby/Rails job:\n Find a local (regional, national) Ruby/Rails community. Check out the Ruby meetup calendar or this list of upcoming Ruby conferences; Choose one active person in that community. Tip: look for people who give talks regularly or are mentors. Or even someone who had a similar journey as you*. Send them a message asking for their advice/insights about the ruby/Rails market for early career devs.  If you don‚Äôt know what to send, here‚Äôs a template that you can use: ‚ÄúHi! I‚Äôve been practicing Ruby and I found you from this community! I hope you don‚Äôt mind reaching out. I‚Äôd like to ask you what are the companies you\u0026rsquo;d recommend junior Ruby devs applying for? What is your advice for getting my Ruby/Rails job if I don\u0026rsquo;t have lots of experience yet?‚Äù.\nAsking specific questions like these shows that you did your research, and helps people understand how they can help you. It\u0026rsquo;s great to meet more experienced devs and potentially create a mentorship relationship.\nBy reaching out to someone from the Ruby community you will see opportunities you never thought of before. I bet worrying about the market is not helping a lot, so go out there and start creating your opportunities today.\n*Please keep in mind that reaching out to people with a genuine connection request is different than spamming them. Check out this thread about reaching out to people respectfully:\nA thing I have noticed lately: in media, we spend a lot of time encouraging folks to find a mentor and develop a relationship with them. We often to not tell people there is a correct and incorrect way to go about this. Maybe we think \u0026quot;everyone should know,\u0026quot;--a big bias to have\n\u0026mdash; Emma Carew Grovum (@emmacarew) May 5, 2021   Did you like this article? Then you're gonna love these other ones:\n  On the Job Hunt? Try this one thing to get experience as an early career Ruby dev   Rails Conf 2021 Talks for Early Career Devs   Contribute to Ruby on Rails: filtering \u0026amp; reproducing issues   ","permalink":"https://www.stefannibrasil.me/posts/will-i-find-work-if-i-learn-ruby/","summary":"Ruby is keeping you interested in transitioning to the software development world. But you\u0026rsquo;re not sure you\u0026rsquo;re gonna be employable. You might have heard that you should just choose JavaScript because, you know, everyone is saying Ruby is a dying domain.\nBut you don\u0026rsquo;t see yourself keeping up with the Kardashians traditional JS web dev world.\nYou\u0026rsquo;ve heard that there are plenty of Ruby/Rails jobs out there. But how do you get your first one as an early career dev?","title":"Will I Find Work if I Learn Ruby in 2021"},{"content":"Welcome! Please check your inbox to confirm your subscription: The email is coming from \u0026ldquo;Stefanni\u0026rdquo;. If you can\u0026rsquo;t find it in your inbox, check your other tabs or the spam folder.\nStill can\u0026rsquo;t find it? Send a message to hi@stefannibrasil.me and I\u0026rsquo;ll fix it for you.\nSee you in your inbox!\n","permalink":"https://www.stefannibrasil.me/confirm-your-subscription/","summary":"Welcome! Please check your inbox to confirm your subscription: The email is coming from \u0026ldquo;Stefanni\u0026rdquo;. If you can\u0026rsquo;t find it in your inbox, check your other tabs or the spam folder.\nStill can\u0026rsquo;t find it? Send a message to hi@stefannibrasil.me and I\u0026rsquo;ll fix it for you.\nSee you in your inbox!","title":"Check your email"},{"content":"Hi, nice seeing you here! Here\u0026rsquo;s what you\u0026rsquo;re looking for:\nSlides\n-- Rails API-only Cheat Sheet\nThank you for checking these materials out! Let me know your thoughts, feedback or suggestions! :)\n-Stefanni Brasil\n ","permalink":"https://www.stefannibrasil.me/railsconf/","summary":"Hi, nice seeing you here! Here\u0026rsquo;s what you\u0026rsquo;re looking for:\nSlides\n-- Rails API-only Cheat Sheet\nThank you for checking these materials out! Let me know your thoughts, feedback or suggestions! :)\n-Stefanni Brasil\n ","title":"Rails Conf 2021 Slides + Rails API-only Cheat Sheet"},{"content":"Before you get too excited and run rails new thecoolest --api on your terminal, it might be a good idea to take some time to consider what your needs are.\nHow different is a Rails API-only from a full-stack Rails app? As you can see in the image below, the API-only is a lighter version of a full stack Rails app:\nThe reason why it\u0026rsquo;s lighter is because Rails API-only won\u0026rsquo;t render HTML pages, handle user sessions \u0026amp; cookies, nor display any assets.\nRails API-only was built for the scenarios where you need a Rails application that serves JSON resources to an API client or client-side framework.\nThat said, if you need to render HTML pages or files, you\u0026rsquo;ll be better off building an API on top of a Rails app.\nRails API-only Cheat Sheet Check out this cheat sheet with the most important things to consider when deciding which Rails app configuration you should go with:\nDownload your Rails API-only Cheat Sheet\nSidenote: if you\u0026rsquo;re building an API, please consider following the OpenAPI specification. You can use Swagger for implementing it. rwsagger is the most popular option.\n Did you like this article? Then you're gonna love these other ones:\n  On the Job Hunt? Try this one thing to get experience as an early career Ruby dev   Rails Conf 2021 Talks for Early Career Devs   Contribute to Ruby on Rails: filtering \u0026amp; reproducing issues   ","permalink":"https://www.stefannibrasil.me/posts/should-you-go-with-rails-api-only/","summary":"Before you get too excited and run rails new thecoolest --api on your terminal, it might be a good idea to take some time to consider what your needs are.\nHow different is a Rails API-only from a full-stack Rails app? As you can see in the image below, the API-only is a lighter version of a full stack Rails app:\nThe reason why it\u0026rsquo;s lighter is because Rails API-only won\u0026rsquo;t render HTML pages, handle user sessions \u0026amp; cookies, nor display any assets.","title":"Should you create a new Rails app as API-only?"},{"content":"You‚Äôre on the list!\nI send out a new letter almost every 2 weeks. It‚Äôll come from hi@stefannibrasil.me\nIf you haven‚Äôt yet, you can check out the past blog posts or follow me on Twitter for more thoughts on coding, Ruby, career and happiness.\nWelcome to this newsletter! It\u0026rsquo;s great to have you here ‚òï\n-Stefanni\n","permalink":"https://www.stefannibrasil.me/thank-you/","summary":"You‚Äôre on the list!\nI send out a new letter almost every 2 weeks. It‚Äôll come from hi@stefannibrasil.me\nIf you haven‚Äôt yet, you can check out the past blog posts or follow me on Twitter for more thoughts on coding, Ruby, career and happiness.\nWelcome to this newsletter! It\u0026rsquo;s great to have you here ‚òï\n-Stefanni","title":"Thank You"},{"content":"Which authentication strategy should you use for Rails API? How to implement a secure authentication strategy is by the far the most confusing part of building an API.\nIt\u0026rsquo;s important to evaluate your app requirements before choosing any strategy in the first place to avoid any security implications.\nTo help you figure out which authentication strategy is the best for your case, here are 5 possible solutions for you:\nRails API-only If your API is running as a standalone app and you don\u0026rsquo;t need a web interface of any sort, then a header-based token auth might be enough.\n1. jwt-ruby If you\u0026rsquo;re looking for a simple and secure token-based authentication auth strategy, you can use this gem to generate the JWT (JSON Web Token) to send on your Authentication Request Header.\nPros It provides an out of the box JWT token strategy mechanism.\nCons You need to implement the token verification on the server-side. You can use Rails HTTP authentication support for that.\n2. api_guard Is a token based authentication solution with token refreshing \u0026amp; allowlisting for APIs built on Rails.\nIt\u0026rsquo;s built on top of jwt-ruby, so besides all the JWT functionalities, you also get account creation and authentication features.\nPros It\u0026rsquo;s a clean and simple solution. It can be used with Devise, if needed.\nCons You might not even need a gem, because most of it is honestly not that hard to implement yourself. It\u0026rsquo;s an overhead if you don\u0026rsquo;t need to expire tokens.\nStandard Rails app with API If you need some sort of account management interface for your API, or to implement oauth or omniauth flows, here are some alternatives:\n3. Doorkeeper It\u0026rsquo;s a flexible OAuth 2 provider functionality to your Rails or Grape app.\nPros It provides all oauth flows. Can be used with Devise. Version \u0026gt; supports Rails API-only mode as well.\nCons Don\u0026rsquo;t use it if you don\u0026rsquo;t need an oauth2 flow.\n4. devise_token_auth Use it if your Rails app already uses Devise and you want to add a token-based auth for your API. You can require endpoints to have an authenticated user or not depending on the needs of your API.\nPros If you\u0026rsquo;re happy with Devise and already use it on your Rails app, it\u0026rsquo;s the easiest solution. It also makes it easy to add omniauth provider functionality.\nCons Devise is also well know for bloating your Rails app, so keep this in mind. \u0026gt;= Currently supports Rails version ‚â• 4.2.0.\n5. rodauth-rails Rodauth-rails is built on top of Rodauth, which is an authentication framework alternative to Devise.\nPros Rodauth supports JWT, including refresh tokens functionality. Supports Rails API-only mode.\nCons If you need social logins or omniauth providers, you\u0026rsquo;ll need to implement yourself but you can build one yourself using the existing Rodauth API.\nAPI authentication can be super confusing. I hope you got some ideas on how to move forward with choosing the strategy that best suit your API requirements. Taking some time to evalute the best strategy earlier can save you lots of time and work.\n Did you like this article? Then you're gonna love these other ones:\n  On the Job Hunt? Try this one thing to get experience as an early career Ruby dev   Rails Conf 2021 Talks for Early Career Devs   Contribute to Ruby on Rails: filtering \u0026amp; reproducing issues   ","permalink":"https://www.stefannibrasil.me/posts/5-ways-to-handle-your-rails-api-authentication/","summary":"Which authentication strategy should you use for Rails API? How to implement a secure authentication strategy is by the far the most confusing part of building an API.\nIt\u0026rsquo;s important to evaluate your app requirements before choosing any strategy in the first place to avoid any security implications.\nTo help you figure out which authentication strategy is the best for your case, here are 5 possible solutions for you:\nRails API-only If your API is running as a standalone app and you don\u0026rsquo;t need a web interface of any sort, then a header-based token auth might be enough.","title":"5 Ways to Handle Your Rails API Authentication"},{"content":"The first time I realized I was being too future-focused was when I got in a bad mental health state in 2020.\nI didn‚Äôt want to pay for Cognitive-Behavior Therapy sessions. I could have, but I didn‚Äôt want to spend money on it. Not super clever, I know.\nLooking back, I get mad at myself for putting savings before my mental health needs. This experience changed me, since it took me less than one year to improve my mental health, live a happier and confident life. It was a big growth moment.\nMoney now has a different meaning to me. I don\u0026rsquo;t go out there spending like crazy but I also don\u0026rsquo;t track every expense. What is more important to me now is think of as an investment. Instead of fixating too much on how much I can save, I decided to think og how much I can create.\n‚ÄúWait, are you telling me to ignore cutting down my expenses and do everything that\u0026rsquo;s important to me, then?‚Äù\nNot exactly.\nBefore investing in my Mental Health, I didn‚Äôt know what I wanted to do with my life.\nSaving money was my priority. I‚Äôm proud of committing to it. Good or not, it allowed me to having the option to quit my job during a pandemic. Plus, I know I can achieve any goals I set myself to, which is awesome.\nThe danger lies in seeing everything as equally important.\nWhen we don‚Äôt get clarity on what matters to us, we end up doing what everyone else is doing. That\u0026rsquo;s the danger of not knowing where you\u0026rsquo;re money is going. Saving more right now might be what you need to create the space to reflect on your life. but only you can know that.\nOne way to balance your present and future happiness What if you start by deciding with what is the most important to you?\nHere\u0026rsquo;s an exercise from the book Not Meditating - Finding Peace, Love and Happiness without sitting still:\n Imagine someone is reading the eulogy at your funeral. What would you want them to say about your relationships, your attitude to life, your achievements? Would you want to be described as positive, fun-loving, and caring? Would you want your family and friends to say you always had time for them? Would you want to describe how you followed your dreams and made the most of your life? Would you want them to describe you always had the latest car or TV or to mention your recent promotion or pay rise? Would you want them to say, ‚ÄúWell they were always very busy\u0026quot;?\n Start designing your today for the life you want to be remembered for. Once you get clear on what matters to you, it\u0026rsquo;s easier to say no to all the rest.\n If you‚Äôve enjoyed this content, you might want to check out Spark your Runway with FIRE. Your guide to planning for financial independence so you can retire early, or build your runway to go full-time on your business, sooner!\n","permalink":"https://www.stefannibrasil.me/posts/balance-present-future-fire/","summary":"The first time I realized I was being too future-focused was when I got in a bad mental health state in 2020.\nI didn‚Äôt want to pay for Cognitive-Behavior Therapy sessions. I could have, but I didn‚Äôt want to spend money on it. Not super clever, I know.\nLooking back, I get mad at myself for putting savings before my mental health needs. This experience changed me, since it took me less than one year to improve my mental health, live a happier and confident life.","title":"Balancing present and future with the FIRE movement"},{"content":"\u0026ldquo;Maybe Python or Go is a better choice? Or even Javascript?\u0026rdquo; If you\u0026rsquo;ve been asking yourself these questions, this post is for you.\nWhen I was learning how to code in 2016, Ruby on Rails was trending and every startup was using it. It was obvious that learning Rails would be an easy way to get my first dev job. We\u0026rsquo;re in 2021, though, and things have changed.\nThe answer to \u0026ldquo;Is Rails still relevant?\u0026rdquo; depends on your context:\n if you\u0026rsquo;re looking for your first dev job, it depends on how fast you need one. Python and JavaScript seem to have more opportunities for early-career devs. It\u0026rsquo;s not as if there aren\u0026rsquo;t any early-career Rails devs jobs! I saw lots of junior opportunities at Rails Conf, for example. if you\u0026rsquo;re an experienced dev wanting to work on more complex problems using a sophisticated tool, absolutely yes. I\u0026rsquo;ve also heard several times that Ruby jobs are the ones who pay more.  The question then becomes \u0026ldquo;what kind of opportunities are there for Rails devs in 2021?\u0026quot;.\nIs there still a market for Ruby on Rails? The reason why Rails seems to be \u0026lsquo;paused\u0026rsquo; is because there are not lots of things to keep improving it. You can see this as a good thing, though: it\u0026rsquo;s a stable framework!\nRails is a proven, well-understood, and stable web dev standard. That\u0026rsquo;s what makes it popular.\nThat means learning Rails can give you the opportunities to work with:\n  Existing established companies that won\u0026rsquo;t throw away their Rails code. A few examples: Github, Shopify, Vimeo, Clio;\n  Small businesses that don\u0026rsquo;t care which tech stack you build their products;\n  Early-stage companies adopting Rails. A few examples: circle.so, orbit.love, meetcleo.com.\n  So if any of these markets look like what you\u0026rsquo;d be happy working with, then you can invest your time learning Rails without worrying there aren\u0026rsquo;t gonna have jobs for you.\n If you\u0026rsquo;d also like to know the opinion from experienced Rails dev besides my own, you might be interested in checking out the replies for this question on Twitter:\nExperienced Rails devs:\nWhat would you say to an entry-level dev who asked you if it\u0026#39;s a good idea for them to learn Ruby/Rails?\n\u0026mdash; Stefanni Brasil (@stefannibrasil) May 4, 2021   Did you like this article? Then you're gonna love these other ones:\n  On the Job Hunt? Try this one thing to get experience as an early career Ruby dev   Rails Conf 2021 Talks for Early Career Devs   Contribute to Ruby on Rails: filtering \u0026amp; reproducing issues   ","permalink":"https://www.stefannibrasil.me/posts/is-ruby-on-rails-still-relevant/","summary":"\u0026ldquo;Maybe Python or Go is a better choice? Or even Javascript?\u0026rdquo; If you\u0026rsquo;ve been asking yourself these questions, this post is for you.\nWhen I was learning how to code in 2016, Ruby on Rails was trending and every startup was using it. It was obvious that learning Rails would be an easy way to get my first dev job. We\u0026rsquo;re in 2021, though, and things have changed.\nThe answer to \u0026ldquo;Is Rails still relevant?","title":"Is Ruby on Rails Still Relevant in 2021?"},{"content":"Hello, I‚Äôm Stefanni Brasil. Brasil is my real name, how cool is that?! :)\nI am the co-founder of hexdevs, where I research, design, and develop programs that help you become a Ruby expert developer.\nI am a self-taught developer, avid reader, and cats lover. I write here on my blog, host live Open Source Thursdays coding sessions and co-host the hexdevs podcast.\nBesides that, I\u0026rsquo;ve been giving lightning talks at local meetups, on RubyConf Sao Paulo, and RailsConf.\nI am a huge believer that everyone is capable of achieving whatever they want for their lives. I\u0026rsquo;m driven by curiosity and kindness.\nI also publish a weekly(ish) newsletter which you can sign up for here.\nTalks \u0026amp; Podcasts I\u0026rsquo;ve done a few talks and interviews:\n üéß Perceptual Learning with Stefanni Brasil - Code with Jason. üì∫ How to contribute to Ruby on Rails - WNB.rb. üéß Things I wish someone had told me when I was learning to code as a self-taught developer - New Relic\u0026rsquo;s Launchies Podcast. üì∫ Should I go with Rails API-only? - RailsConf 2021. üéß RailsConf Scholars: 2021 Remote Edition - Greater than Code. üì∫ Developing Yourself as a Junior Developer - Vanruby meetup. üì∫ Rails 5 System Tests - Vanruby meetup.  Fun facts about me I am from Brazil and I live in Vancouver, BC ‚õ∞Ô∏èüåßÔ∏è\nI\u0026rsquo;ve worked with lots of things in the past: as academic research, writer and translator; English and French teacher. The latest one was as a Ruby developer.\nI love learning, including how to learn more effectively. I like to see how much I can change, and how much I can become a better version of myself. And help others avoid the mistakes I made (and continue making).\nOnce I get interested in something, I‚Äôm pretty good at extracting what‚Äôs useful for me and changing my habits until I get a positive feedback loop. A few things I\u0026rsquo;m proud to have learned by myself:\n I learned English when I was a teenager by listening to songs and watching movies. My family didn\u0026rsquo;t have lots of money to invest in my Education. Also, I lived in such a tiny city that school languages didn\u0026rsquo;t even exist. I adopted a whole foods plant-based diet at the end of 2019. I\u0026rsquo;m super healthy effortlessly. I help the planet and reduce animal cruelty as a bonus. I completely rewired my brain to have a growth mindset and be more positive. I even read self-help books now. All thanks to CBT - Cognitive-Behaviour Therapy and Mindfulness Meditation. I read a lot about anything. I basically eat books for breakfast. I also apply what I learn from them, and share my lessons throughout my writing. I have a degree in Portuguese \u0026amp; French Literature. I also won a scholarship to study at the University of Coimbra - Portugal - for 2 years. I loved spending my time researching Science Fiction and Media Culture. I learned how to code when I was finishing my Literature degree. I enrolled in a Computer Science degree later but dropped it after 1 year because I achieved my dream of moving abroad. I‚Äôm on my path to being the first millionaire in my family. I want to democratize Mental Health and Coaching services. I believe that gaining economic power is key to do the changes I want to see in the world. I love exercising! I run, I ride my bike, I do yoga, I do lots of bodyweight exercises. I do ~15 pushups every day (a tiny habit). I dream of crossing North America in an R.V., but I don\u0026rsquo;t think my cats would like this idea. One of my hobbies is Digital Lettering with Procreate.   I am @stefannibrasil on Twitter. Say hi :)\nIf you have something interesting to ask or to discuss, you can find me at hi at stefannibrasil dot me.\n","permalink":"https://www.stefannibrasil.me/about/","summary":"About Stefanni Brasil - The Kind Developer","title":"Hi there! üëã"},{"content":"I believed I had to be born confident, and I wasn‚Äôt, so why keep trying? How happy I am to have been wrong about that!\nThis post offers exercises from the book ‚ÄúThe Confidence Code: The Science and Art of Self-Assurance - What Women Should Know‚Äù and from Cognitive Behaviour Therapy.\nStart practicing these 8 key activities and see how you feel a few weeks from now.\nReady? üöÄ\nExercises to build self-confidence  When in doubt, ACT. Decide. What kills confidence is overthinking. Keep deciding as if your life depends on it. If it helps, write down the consequences of your decision, and think through it with an analytical perspective. What do you have to lose? It\u0026rsquo;s probably less than you think. Fail fast. Learn. Keep trying. This process builds thicker skin. You‚Äôll get more confident by trying, not from getting perfect on the first try. Perfection is the killer of great things. Take risks. Afraid of failing? So what, do it anyway! Risk keeps you on life‚Äôs edge. It keeps you growing, feeling inspired, and gaining confidence. Turn your fear into an ally. Fear is a powerful feeling. Instead of letting it stop you, imagine using that force to get you moving towards what you want. Break your big goals into small actionable goals. When facing big challenges, break them down into smaller parts. Something as simple as writing down a to-do list works. Practice self-compassion. When things don‚Äôt go as you expected, practice self-compassion. The central precept of self-compassion is that we should all be kinder to ourselves because doing so makes us healthier, more fulfilled, and more successful in the pursuits we choose. You always get to try again. Name your inner negative voices. I started naming my negative voices: Judge Judy, Pam the Planner. This helps me handle my cognitive distortions better. Once I identify who my voices are, I can say ‚Äúthanks, Pam, but we‚Äôll be fine!‚Äù. Once you become aware of your inner negative voices, you gain power over them. By the way, if your name is Judy or Pam, feel free to use my name for your voices :P. Start a Thought Record Journal. When you get yourself too overwhelmed by your cognitive distortions, add them to a Thought Record. Why does it work? It shows you that your thoughts are way less powerful than you believe. Making them ‚Äòreal‚Äô gives you an analytical perspective of the situation, and you realize it‚Äôs not a big deal.  It\u0026rsquo;s not easy to change your thoughts and behaviors. But it gets easier every time you persist üèãÔ∏è‚Äç‚ôÄÔ∏è.\nGood luck with your self-confidence journey. You won\u0026rsquo;t regret investing in it.\nSelf-confidence books and articles The Confidence Code: The Science and Art of Self-Assurance - What women should know*\nRadical Acceptance: Awakening the Love That Heals Fear and Shame\nFeeling Good: The New Mood Therapy\nCognitive Behavioral Therapy\nHow to practice Mindfulness\n Did you like this article? Then you're gonna love these other ones:\n  Balancing present and future with the FIRE movement   ","permalink":"https://www.stefannibrasil.me/posts/how-to-practice-self-confidence/","summary":"I believed I had to be born confident, and I wasn‚Äôt, so why keep trying? How happy I am to have been wrong about that!\nThis post offers exercises from the book ‚ÄúThe Confidence Code: The Science and Art of Self-Assurance - What Women Should Know‚Äù and from Cognitive Behaviour Therapy.\nStart practicing these 8 key activities and see how you feel a few weeks from now.\nReady? üöÄ\nExercises to build self-confidence  When in doubt, ACT.","title":"8 exercises to build confidence in yourself"}]