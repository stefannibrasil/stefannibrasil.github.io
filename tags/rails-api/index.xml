<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rails api on Stefanni Brasil</title>
    <link>https://www.stefannibrasil.me/tags/rails-api/</link>
    <description>Recent content in rails api on Stefanni Brasil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Apr 2021 17:41:48 -0700</lastBuildDate><atom:link href="https://www.stefannibrasil.me/tags/rails-api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Which Rails mode should you choose to build your API?</title>
      <link>https://www.stefannibrasil.me/posts/which-rails-mode-for-implementing-apis/</link>
      <pubDate>Mon, 05 Apr 2021 17:41:48 -0700</pubDate>
      
      <guid>https://www.stefannibrasil.me/posts/which-rails-mode-for-implementing-apis/</guid>
      <description>Ruby on Rails API-only mode gives you all the API standard template functionalities (JSON requests, HTTT header requests, Parameter parsing, Basic, Digest, and Token Authentication, etc.) following the well-known Rails standards.
Before you get too excited and run rails new thecoolest--api on your terminal, you need to take some time to consider what your requirements and future needs are. This step is crucial because it will determine how to securely authenticate your resources.</description>
    </item>
    
    <item>
      <title>5 Ways to Handle Your Rails API Authentication</title>
      <link>https://www.stefannibrasil.me/posts/5-ways-to-handle-your-rails-api-authentication/</link>
      <pubDate>Thu, 01 Apr 2021 13:12:38 -0700</pubDate>
      
      <guid>https://www.stefannibrasil.me/posts/5-ways-to-handle-your-rails-api-authentication/</guid>
      <description>Which authentication strategy should you use for Rails API? How to implement a secure authentication strategy is by the far the most confusing part of building an API.
It&amp;rsquo;s extremely important to evaluate your app requirements before choosing any strategy in the first place to avoid any security implications.
There&amp;rsquo;s nothing worse than having to turn your entire Rails API-only into a regular Rails app because midway you realized you needed an OAuth authentication code flow or have an interface for your users, right?</description>
    </item>
    
  </channel>
</rss>
